#!/usr/bin/perl

# chkUGM (v1.1.7) updated to track MacOSXUpdate10.1.4
# This script reads the bom files from installed software on a MacOS X system
# and compares the current modes, owners, and groups of installed files to
# those when they were installed.  It generates a shell script which can be run
# to restore the files to their original state. Necessity is the mother, etc.
# Suggestions, enhancements, and comments to Larry Prall <lgp@cablespeed.com>

die "You must run this script as root (or with sudo).\n" if $<;

# In case we ever want to add a few more BOM files
# we'll make provision to stuff a few more entries
# in the array. New entries must be added at the end
# of the list since the boms need to be processed in the
# order they were loaded. Sometimes the UGM data for a
# file changes between builds and we need to take the
# most recent.
my @BOMS = (
	"/System/Library/CoreServices/BaseSystem.bom",
	"/Library/Receipts/BSD.pkg/Contents/Resources/BSD.bom",
	"/Library/Receipts/Essentials.pkg/Contents/Resources/Essentials.bom",
	"/Library/Receipts/SecurityUpdate10-19-01.pkg/Contents/Resources/SecurityUpdate10-19-01.bom",
	"/Library/Receipts/MacOSXUpdate10.1.1.pkg/Contents/Resources/MacOSXUpdate10.1.1.bom",
	"/Library/Receipts/MacOSXUpdate10.1.2.pkg/Contents/Resources/MacOSXUpdate10.1.2.bom",
	"/Library/Receipts/MacOSXUpdate10.1.3.pkg/Contents/Resources/MacOSXUpdate10.1.3.bom",
	"/Library/Receipts/SecurityUpdateApril2002.pkg/Contents/Resources/SecurityUpdateApril2002.bom",
	"/Library/Receipts/MacOSXUpdate10.1.4.pkg/Contents/Resources/MacOSXUpdate10.1.4.bom",
	);
# A bit of a kludge added to handle the combo updates
my $combo2 = "/Library/Receipts/MacOSXUpdateCombo10.1.2.pkg/Contents/Resources/MacOSXUpdateCombo10.1.2.bom";
my $combo3 = "/Library/Receipts/MacOSXUpdateCombo10.1.3.pkg/Contents/Resources/MacOSXUpdateCombo10.1.3.bom";
if ( -f $combo3 ) {
	splice @BOMS, 4, 3, ($combo3 );
} elsif ( -f $combo2 ) {
	splice @BOMS, 4, 2, ($combo2 );
}

# We'll key on filename and stick with the last change we find
my ( %User_Group, %Mode, %Fatal );

sub chkmode {
	my ( $file, $m, $t_m) = @_;
	my %type = (
	' 10000' => 'named pipe',
	' 20000' => 'character special',
	' 40000' => 'directory',
	' 60000' => 'block special',
	'100000' => 'regular file',
	'120000' => 'symbolic link',
	'140000' => 'socket',
	'160000' => 'whiteout',
	);
	
	if ( (my $ft = oct($m) & 0170000 ) eq (my $t_ft = oct($t_m) & 0170000) ) {
		if ( (my $mode = oct($m) & 07777) ne oct($t_m) & 07777 or exists $Mode{$file} ) {
			$Mode{$file} = $mode;
		}
	} else {
		my $oft = sprintf "%6o", $ft;
		my $ot_ft = sprintf "%6o", $t_ft;
		print "Fatal error: $file is a $type{$ot_ft} instead of $type{$oft}\n";
		$Fatal{$file}{GOOD_TYPE} = $type{$oft};
		$Fatal{$file}{BAD_TYPE} = $type{$ot_ft};
		# Even though this is a fatal error for the system, it's not
                # for the script, so we'll press on.
	}
}

my $root;
chdir "/";
# Since we expect a lot of files to be missing, we won't clutter the display
# with them.
open MISSING, ">/tmp/missing_files.txt";

# But we need some sort of visual indication that something is happening, so
# we'll use unbuffered output...
$|=1;

# ...and print some dots
print "Each dot represents 1000 files checked:\n";
my $filecount;

while (<@BOMS>) {
	if ( not -f $_ ) {
		($noshow = $_) =~ s@.*/@@;
		print "\nNo BOM file $noshow; not installed?\n";
		next;
	}
	open LSBOM, "/usr/bin/lsbom $_ |";
	while (<LSBOM>) {
		$filecount++;
		if ( $filecount > 999 ) {
			print ".";
			$filecount = 0;
		}
		my ( $file, $mode, $ug) = (split /\t/, $_);
		# We only want to process root once
		next if $file eq "." and  $root;
		$root++ if $file eq ".";
		# We can't change these anyway, so forget about them
		next if  $file eq "./.vol" or $file eq "./dev";
		# No point in worrying about symlinks
		next if -l $file;
		# Skip the "rsrc" files...
		next if $file =~ /\/\._/;
		chomp $ug;
		$ug =~ s@/@:@;
		# If we don't have the right pattern in the third field...
		die "Fatal error in input (possible tab in filename $file ? )" unless $ug =~ /(\d+:\d+)/;
		# There will normally be a lot of missing files because of
		# updated or removed (or moved) applications, and because of
		# dynamic files like the netinfo db files.
		if ( not -e $file ) {
			next if $file =~ m@private/var/db/netinfo/local.nidb@;
			print MISSING "No such file $file\n";
			next;
		}
		my ( $a_mode, $user, $group ) = (lstat $file)[2,4,5];
		my $t_mode = sprintf "%4o", $a_mode;
		my $t_ug = "$user" . ":" . "$group";

		# If everything is as it should be and we haven't make any
		# changes to this file previously we'll press on
		next if $mode eq $t_mode and $ug eq $t_ug and not exists $Mode{$file} and not exists $User_Group{$file};

		if ( $mode eq $t_mode ) {
			# Then a later change has overridden an earlier one
			# so we'll leave it alone.
			delete $Mode{$file};
		} else {
			chkmode($file, $mode, $t_mode);
		}
		if ( $ug eq $t_ug ) {
			# Then a later change has overridden an earlier one
			# so we'll leave it alone.
			delete $User_Group{$file}
		} else {
			$User_Group{$file} = $ug;
		}
	}
}
print "\n";

# Now we'll write our script -- if we have anything to write
if ( %User_Group or %Mode ) {
	open SCRIPT, ">/tmp/fixUGM.sh" or die "Can't open script file.\n";
	print SCRIPT "#!/bin/sh\ncd /\n";
	# A couple of users noted that with over 10000 files or so to
	# fix, a long time could pass with no output and suggested some
	# kind of marker
	print SCRIPT "echo Each dot represents 100 files corrected:\n";
	my $file;
	my $count;
	foreach $file ( sort keys %Mode ) {
		printf SCRIPT "chmod %o \"%s\"\n", $Mode{$file}, $file; 
		$count++;
		if ( $count > 99 ) {
			print SCRIPT "echo -n .\n";
			$count = 0;
		}
	}
	foreach $file ( sort keys %User_Group ) {
		# If Apple ever starts shipping files owned by "nobody"
		# this line will have to change to
		# print SCRIPT "chown -- $User_Group{$file} \"$file\"\n";
		print SCRIPT "chown $User_Group{$file} \"$file\"\n";
		$count++;
		if ( $count > 99 ) {
			print SCRIPT "echo -n .\n";
			$count = 0;
		}
	}
	print SCRIPT "echo\n";
	close SCRIPT;
	chmod 0744, "/tmp/fixUGM.sh";
	print "\nCheck the script /tmp/fixUGM.sh for discrepancies; run it to correct them.\n";
} else {
	print "\nNo corrections to be made.\n";
}

if ( %Fatal ) {
	print "\nThere were fatal errors.\n";
	my $nofile;
	open FATALS, ">/tmp/FATAL_ERRORS.txt" or warn "Can't open errors file.\n", $nofile++;
	foreach $file ( sort keys %Fatal ) {
		print "Fatal error: $file is a $Fatal{$file}{BAD_TYPE} instead of $Fatal{$file}{GOOD_TYPE}\n";
		print FATALS "Fatal error: $file is a $Fatal{$file}{BAD_TYPE} instead of $Fatal{$file}{GOOD_TYPE}\n" unless $nofile;
 	}
	unless ( $nofile ) {
		close FATALS;
		chmod 0644, "/tmp/FATAL_ERRORS.txt";
		print "The list of fatal errors is in /tmp/FATAL_ERRORS.txt\n";
	}
}

if ( -s "/tmp/missing_files.txt" ) {
	print "\nA list of missing files is in /tmp/missing_files.txt\n";
} else {
	unlink "/tmp/missing_files.txt";
}

